#!/bin/bash -e
#
# ==============================================================================
# PAQUETE: asistente-actualizacion
# ARCHIVO: postinst
# DESCRIPCIÓN: Configura el sistema despues la instalación del paquete.
# COPYRIGHT:
#  (C) 2010 Luis Alejandro Martínez Faneyth <martinez.faneyth@gmail.com>
#  (C) 2010 Diego Alberto Aguilera Zambrano <daguilera85@gmail.com>
#  (C) 2010 Carlos Alejandro Guerrero Mora <guerrerocarlos@gmail.com>
#  (C) 2010 Francisco Javier Vásquez Guerrero <franjvasquezg@gmail.com>
# LICENCIA: GPL3
# ==============================================================================
#
# Este programa es software libre. Puede redistribuirlo y/o modificarlo bajo los
# términos de la Licencia Pública General de GNU (versión 3).

PKG="asistente-actualizacion"
BASE="/usr/share/asistente-actualizacion/"
LOCAL="/usr/share/asistente-actualizacion/listas/canaima-local-paquetes.list"
DESKTOP_FILE="/etc/xdg/autostart/asistente-actualizacion-automatico.desktop"
AUTO_DESKTOP_FILE="/usr/share/applications/asistente-actualizacion.desktop"

case ${1} in

	configure)

	# Listando todos los paquetes presentes en el sistema (Canaima 2.1)
	dpkg-query -W -f='${Package}\t${Status}\n' | grep "install ok installed" | awk '{ print $1 }' > ${LOCAL}
	
	# Permitiendo lectura/escritura para todos los usuarios
	chmod 777 /usr/share/asistente-actualizacion/log/principal.log

        # Para cada usuario en /home/ ...
	for HOME_U in /home/*?; do

		# Obteniendo sólo el nombre del usuario
		USUARIO=$( basename ${HOME_U} )

		# Y en caso de que el usuario sea un usuario activo (existente en /etc/shadow) ...
		if [ $( grep -c "${USUARIO}:.*:.*:.*:.*:.*:::" /etc/shadow ) == 1 ] \
		&& [ $( grep -c "${USUARIO}:.*:.*:.*:.*:.*:/bin/.*sh" /etc/passwd ) == 1 ] \
		&& [ -d ${HOME_U}/.config ] \
		&& [ -d ${HOME_U} ]; then

			# Asegurando que el directorio .config/asistente-actualizacion/ esté creado
			mkdir -p /home/${USUARIO}/.config/asistente-actualizacion/

			# con permisos apropiados
			chown ${USUARIO}:${USUARIO} /home/${USUARIO}/.config/asistente-actualizacion/
			
			# Copia del archivo de configuración que determina si debe ejecutarse asistente-actualizacion al inicio o no
			cp /etc/skel/.config/asistente-actualizacion/mostrar.conf /home/${USUARIO}/.config/asistente-actualizacion/
			
			# con permisos apropiados
			chown ${USUARIO}:${USUARIO} /home/${USUARIO}/.config/asistente-actualizacion/mostrar.conf
		fi
	done

	FLAG_270_1G=0
	FLAG_M2400=0
	FLAG_D2100=0
	FLAG_270=0
	FLAG_450=0
	FLAG_455=0
	FLAG_PC=0
	CONTROL_PARENTAL=0

	DMI_TYPES="bios-vendor system-manufacturer system-product-name system-version baseboard-manufacturer baseboard-product-name chassis-manufacturer chassis-type processor-manufacturer processor-version processor-frequency baseboard-asset-tag" 

	DMI_TYPES_270="AmericanMegatrendsInc. MagII IntelpoweredclassmatePC Notebook Intel Intel(R)Atom(TM)CPUN270@1.60GHz 1600MHz 0"

	DMI_TYPES_450="Phoenix IntelCorporation IntelpoweredclassmatePC MPPV IntelCorporation IntelpoweredclassmatePC Intel Other Intel C1 1600MHz PTLNanjing"

	DMI_TYPES_455="Phoenix IntelCorporation IntelpoweredclassmatePC BPPV IntelCorporation IntelpoweredclassmatePC Intel Notebook Intel C1 1600MHz PTLNanjing"

	DMI_TYPES_270_1G="AmericanMegatrendsInc. JPSaCouto IntelpoweredclassmatePC Gen1.5L IntelpoweredclassmatePC BLANK Notebook Intel Intel(R)Atom(TM)CPUN270@1.60GHz 1600MHz 0"

	DMI_TYPES_M2400="AmericanMegatrendsInc. PEGATRONCORPORATION T14AF 1.0 PEGATRONCORPORATION T14AF PEGATRONCORPORATION Notebook Intel Intel(R)Core(TM)2DuoCPUT6500@2.10GHz 2100MHz ATN12345678901234567"

	DMI_TYPES_D2100="Phoenix CLEVOCO. M540R NotApplicable CLEVO M540R CLEVO Other Intel CPUVersion 2100MHz"

	for DMI_LOCAL in ${DMI_TYPES}; do
		DMI_TYPES_LOCAL="${DMI_TYPES_LOCAL} $( dmidecode --string ${DMI_LOCAL} | sed 's/ //g' )"
	done

	[ "$( echo ${DMI_TYPES_LOCAL} )" == "$( echo ${DMI_TYPES_270} )" ] && FLAG_270=1
	[ "$( echo ${DMI_TYPES_LOCAL} )" == "$( echo ${DMI_TYPES_450} )" ] && FLAG_450=1
	[ "$( echo ${DMI_TYPES_LOCAL} )" == "$( echo ${DMI_TYPES_455} )" ] && FLAG_455=1
	[ "$( echo ${DMI_TYPES_LOCAL} )" == "$( echo ${DMI_TYPES_270_1G} )" ] && FLAG_270_1G=1
	[ "$( echo ${DMI_TYPES_LOCAL} )" == "$( echo ${DMI_TYPES_D2100} )" ] && FLAG_D2100=1
	[ "$( echo ${DMI_TYPES_LOCAL} )" == "$( echo ${DMI_TYPES_M2400} )" ] && FLAG_M2400=1

	[ $FLAG_270 == 1 ] && [ $FLAG_450 == 0 ] && [ $FLAG_455 == 0 ] && [ $FLAG_270_1G == 0 ] && [ $FLAG_D2100 == 0 ] && [ $FLAG_M2400 == 0 ] && echo "Canaimita 270"

	[ $FLAG_270 == 0 ] && [ $FLAG_450 == 1 ] && [ $FLAG_455 == 0 ] && [ $FLAG_270_1G == 0 ] && [ $FLAG_D2100 == 0 ] && [ $FLAG_M2400 == 0 ] && echo "Canaimita 450"

	[ $FLAG_270 == 0 ] && [ $FLAG_450 == 0 ] && [ $FLAG_455 == 1 ] && [ $FLAG_270_1G == 0 ] && [ $FLAG_D2100 == 0 ] && [ $FLAG_M2400 == 0 ] && echo "Canaimita 455"

	[ $FLAG_270 == 0 ] && [ $FLAG_450 == 0 ] && [ $FLAG_455 == 0 ] && [ $FLAG_270_1G == 1 ] && [ $FLAG_D2100 == 0 ] && [ $FLAG_M2400 == 0 ] && echo "Canaimita 270 (1er Grado)"

	[ $FLAG_270 == 0 ] && [ $FLAG_450 == 0 ] && [ $FLAG_455 == 0 ] && [ $FLAG_270_1G == 0 ] && [ $FLAG_D2100 == 1 ] && [ $FLAG_M2400 == 0 ] && echo "Canaimita d2100"

	[ $FLAG_270 == 0 ] && [ $FLAG_450 == 0 ] && [ $FLAG_455 == 0 ] && [ $FLAG_270_1G == 0 ] && [ $FLAG_D2100 == 0 ] && [ $FLAG_M2400 == 1 ] && echo "Canaimita m2400"

	[ $FLAG_270 == 0 ] && [ $FLAG_450 == 0 ] && [ $FLAG_455 == 0 ] && [ $FLAG_270_1G == 0 ] && [ $FLAG_D2100 == 0 ] && [ $FLAG_M2400 == 0 ] && FLAG_PC=1 && echo "PC"

	[ ${FLAG_PC} == 0 ] && [ -e ${DESKTOP_FILE} ] && [ -e ${AUTO_DESKTOP_FILE} ] && rm -rf ${AUTO_DESKTOP_FILE} && rm -rf ${DESKTOP_FILE}

	;;

        abort-upgrade|abort-remove|abort-deconfigure)
        ;;

        *)

		echo "postinst no reconoce el argumento '"${1}"'" >&2
		exit 1

        ;;

esac

#DEBHELPER#

exit 0
